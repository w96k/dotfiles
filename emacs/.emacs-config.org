* Meta
** Обо мне
   #+BEGIN_SRC emacs-lisp
;; Information about me
(setq user-full-name "Mikhail Kirillov"
      user-mail-address "w96k@posteo.net")
   #+END_SRC
* Внешний вид
** Назначение шрифта и лигатур
   А также отступа между строк
   #+BEGIN_SRC emacs-lisp
  ;;; Set font
  (add-to-list 'default-frame-alist '(font . "Fira Code-10.5"))
  (set-frame-font "Fira Code-10.5" nil t)
  (setq-default line-spacing 0)

(use-package fira-code-mode
  :ensure
  :hook prog-mode)

(global-prettify-symbols-mode)
   #+END_SRC
** Назначение темы
   Вы ее в видите в блоках кода
   #+BEGIN_SRC emacs-lisp
  ;;; Load a theme
  ;;; https://emacsthemes.com/themes/sanityinc-tomorrow-themes.html
  (use-package color-theme-sanityinc-tomorrow
    :ensure
    :config (load-theme 'sanityinc-tomorrow-eighties t))
   #+END_SRC

** Отображение номера строк
   #+BEGIN_SRC emacs-lisp
  ;;; Отображение номера строки ненужно из-за наличия avy-jump
  ;; (use-package display-line-numbers
  ;;   :init
  ;;   (setq display-line-numbers-type 'relative)
  ;;   (global-display-line-numbers-mode))
   #+END_SRC
** Мод-лайн
   #+BEGIN_SRC emacs-lisp
(custom-set-faces
 '(mode-line ((t (:background "#333"
		  :foreground "#cccccc"
		  :box (:line-width 1
			:color "#2d2d2d"
			:style released-button)
		  :weight bold
		  :height 1.0
		  :family "Fira Code")))))
   #+END_SRC
** Подсвечивать текущую строку
   #+BEGIN_SRC emacs-lisp
  ;;; Display current line
  (when (display-graphic-p)
  (global-hl-line-mode))
   #+END_SRC
** Эмодзи (для telega.el)
   #+BEGIN_SRC emacs-lisp
(use-package emojify
  :config
  (global-emojify-mode)
  (global-emojify-mode-line-mode))
   #+END_SRC

* Редактирование кода в общем
** Файловый менеджер
   #+BEGIN_SRC emacs-lisp
   (require 'dired)
   (setq dired-async-mode t)

   ;; Show files in kilobytes
   (setq dired-listing-switches "-alh")

   (defun xah-dired-sort ()
  "Sort dired dir listing in different ways.
Prompt for a choice.
URL `http://ergoemacs.org/emacs/dired_sort.html'
Version 2018-12-23"
  (interactive)
  (let ($sort-by $arg)
    (setq $sort-by (ido-completing-read "Sort by:" '( "date" "size" "name" )))
    (cond
     ((equal $sort-by "name") (setq $arg "-Al "))
     ((equal $sort-by "date") (setq $arg "-Al -t"))
     ((equal $sort-by "size") (setq $arg "-Al -S"))
     ;; ((equal $sort-by "dir") (setq $arg "-Al --group-directories-first"))
     (t (error "logic error 09535" )))
    (dired-sort-other $arg )))

    (define-key dired-mode-map (kbd "s") 'xah-dired-sort)
   #+END_SRC
** Линтер
   #+BEGIN_SRC emacs-lisp
     ;;  Live-checking text
     ;; (use-package flymake
     ;;   :hook (prog-mode . flymake-mode))

     (use-package flycheck
	:config
	(global-flycheck-mode))
   #+END_SRC
** Дерево отмен
   #+BEGIN_SRC emacs-lisp
  ;;; Undo system
   (use-package undo-tree
     :diminish
     :config (global-undo-tree-mode))
   #+END_SRC

** Дерево проекта
   #+BEGIN_SRC emacs-lisp
   (use-package treemacs
     :ensure)

   (use-package lsp-treemacs
     :ensure
     :config
     (lsp-treemacs-sync-mode 1))
   #+END_SRC
** Автоформатирование
   #+BEGIN_SRC emacs-lisp
;;; Autoformatting code
(use-package aggressive-indent
  :ensure t
  :config (global-aggressive-indent-mode))
   #+END_SRC
** SSH
   #+BEGIN_SRC emacs-lisp
(use-package ssh-agency
:ensure)
(use-package pass
:ensure)
   #+END_SRC
** Система контроля версий
   Я использую встроенный модуль VC
   (VC > Magit)
*** Пометки о модифицированных строках
    Если строка добавлена, удалена или отредактирована относительно
    текущего git проекта, то строка помечается зеленым, красным или
    желтым цветом соответственно.

    #+BEGIN_SRC emacs-lisp
;;; Show added & removed git lines
(use-package git-gutter+
  :ensure t
  :diminish
  :config
  (global-git-gutter+-mode)
  (setq git-gutter+-window-width 1)
  (set-face-background 'git-gutter+-added "#99cc99")
  (set-face-background 'git-gutter+-deleted "#f2777a")
  (set-face-background 'git-gutter+-modified "#ffcc66")
  (set-face-background 'git-gutter+-unchanged "#393939")
  (setq git-gutter+-added-sign " ")
  (setq git-gutter+-modified-sign " ")
  (setq git-gutter+-deleted-sign " ")
  (setq git-gutter+-unchanged-sign " ")

  (progn
    (define-key git-gutter+-mode-map (kbd "C-x n") 'git-gutter+-next-hunk)
    (define-key git-gutter+-mode-map (kbd "C-x p") 'git-gutter+-previous-hunk)
    (define-key git-gutter+-mode-map (kbd "C-x v =") 'git-gutter+-show-hunk)
    (define-key git-gutter+-mode-map (kbd "C-x r") 'git-gutter+-revert-hunks)
    (define-key git-gutter+-mode-map (kbd "C-x t") 'git-gutter+-stage-hunks)
    (define-key git-gutter+-mode-map (kbd "C-x c") 'git-gutter+-commit)
    (define-key git-gutter+-mode-map (kbd "C-x C") 'git-gutter+-stage-and-commit)
    (define-key git-gutter+-mode-map (kbd "C-x C-y") 'git-gutter+-stage-and-commit-whole-buffer)
    (define-key git-gutter+-mode-map (kbd "C-x U") 'git-gutter+-unstage-whole-buffer)))
    #+END_SRC
** Буфер обмена
   #+BEGIN_SRC emacs-lisp
  (use-package browse-kill-ring
    :ensure
    :config (browse-kill-ring-default-keybindings))
   #+END_SRC
** Прыжки
   #+BEGIN_SRC emacs-lisp
(use-package avy
  :config
  (define-key global-map (kbd "C-c s") 'avy-goto-char)
  (define-key global-map (kbd "C-c l") 'avy-goto-line))

(use-package ace-jump-mode
  :config
  (global-set-key (kbd "M-o") 'ace-window))
   #+END_SRC
** Сниппеты
   #+BEGIN_SRC emacs-lisp
   (use-package yasnippet
   :config (yas-global-mode))
   #+END_SRC
** Поиск (ivy + swiper + councel)
   #+BEGIN_SRC emacs-lisp
  (use-package ivy
      :diminish
      :config
      (setq ivy-use-virtual-buffers t)
      (setq enable-recursive-minibuffers t)
      (global-set-key "\C-s" 'swiper)
      (global-set-key (kbd "C-c C-r") 'ivy-resume)
      (global-set-key (kbd "<f6>") 'ivy-resume)
      ;;(global-set-key (kbd "M-x") 'counsel-M-x)
      (define-key minibuffer-local-map (kbd "C-r")
      'counsel-minibuffer-history)
      (ivy-mode 1))
   #+END_SRC
** Автодополнение
   #+BEGIN_SRC emacs-lisp
(use-package pos-tip
  :ensure t)

(use-package company
  :diminish
  :custom
  (company-require-match nil)
  (company-minimum-prefix-length 1)
  (company-idle-delay 0)
  (company-tooltip-align-annotation t)
  :hook ((prog-mode . company-mode))
  :bind (:map company-active-map
	      ("C-n" . company-select-next)
	      ("C-p" . company-select-previous)))

(use-package company-quickhelp
  :after company pos-tip
  :config (company-quickhelp-mode))
   #+END_SRC
** Проекты
   #+BEGIN_SRC emacs-lisp
;;; Project Management
(use-package projectile
  :diminish
  :bind (("s-p" . projectile-command-map)
	 ("C-c p" . projectile-command-map))
  :config
  (projectile-global-mode))
   #+END_SRC
** Переход к определению
   #+BEGIN_SRC emacs-lisp
;;; Jump to defenition
(use-package dumb-jump
  :bind (("M-g o" . dumb-jump-go-other-window)
	 ("M-g j" . dumb-jump-go)
	 ("M-g i" . dumb-jump-go-prompt)
	 ("M-g x" . dumb-jump-go-prefer-external)
	 ("M-g z" . dumb-jump-go-prefer-external-other-window)))
   #+END_SRC

** Ширина строки -- 80 символов
   #+BEGIN_SRC emacs-lisp
  ;;; 80 column width limit highlighter
(use-package column-enforce-mode
  :ensure t
  :diminish
  :config
  (80-column-rule))
   #+END_SRC
** Подсвечивание парных скобок
   #+BEGIN_SRC emacs-lisp
;;; Show pair for a parenthesis
(show-paren-mode)
   #+END_SRC

** Ввод парных скобок и кавычек
   #+BEGIN_SRC emacs-lisp
;;; Input of pair delimiters
;;(electric-pair-mode)
   #+END_SRC

** Изменённое поведение биндов C-a и C-e
   #+BEGIN_SRC emacs-lisp
;;; Change Move to end & beginning of the line behavior
(use-package mwim
  :ensure
  :config
  (global-set-key (kbd "C-a") 'mwim-beginning)
  (global-set-key (kbd "C-e") 'mwim-end))
   #+END_SRC
** Удаление лишних пробелов при сохранении
   #+BEGIN_SRC emacs-lisp
;;; Delete trailing whitespace on save
(use-package whitespace-cleanup-mode
  :diminish
  :config (global-whitespace-cleanup-mode))
   #+END_SRC
** EditorConfig
   #+BEGIN_SRC emacs-lisp
;;; Editor Config support
(use-package editorconfig
  :diminish
  :config
  (editorconfig-mode 1))
   #+END_SRC
** Редактирование суперпользователем
   #+BEGIN_SRC emacs-lisp
;;; Edit with root user
(use-package sudo-edit)
   #+END_SRC
* Языки программирования
** LSP (автодополнение для языков) и DAP (дебаг)
   #+BEGIN_SRC emacs-lisp
	(use-package lsp-mode
	 :hook  (scala-mode . lsp)
		(lsp-mode . lsp-enable-which-key-integration)
		(lsp-mode . lsp-lens-mode)
	 :config (setq lsp-prefer-flymake nil))

	 (use-package company-lsp
	   :config (push 'company-lsp company-backends))

	;;(use-package lsp-metals)

	(use-package lsp-ui)

	(use-package lsp-ivy)

	(use-package company-lsp)

     (use-package posframe
       :ensure)

     (use-package dap-mode
       :ensure
       :hook
       (lsp-mode . dap-mode)
       (lsp-mode . dap-ui-mode))

     (use-package lsp-java
       :ensure
       :hook (java-mode . lsp-mode))

     ;; (use-package dap-java
     ;;   :ensure nil)
   #+END_SRC
** LISP
*** Разукрашивание скобок в лиспах
    #+BEGIN_SRC emacs-lisp
;;; Color parens
(use-package rainbow-delimiters
  :hook ((prog-mode . rainbow-delimiters-mode)))
    #+END_SRC

*** Редактирование скобок
    #+BEGIN_SRC emacs-lisp
;;; Parens editing
(use-package paredit)
    #+END_SRC
*** Автокомлпит Scheme
    #+BEGIN_SRC emacs-lisp
(use-package scheme-complete
  :after company)
    #+END_SRC
*** REPL Scheme
    #+BEGIN_SRC emacs-lisp
(use-package geiser)
    #+END_SRC
** Python
*** Elpy
    #+BEGIN_SRC emacs-lisp
  ;; (use-package elpy
  ;;   :ensure t
  ;;   :init
  ;;   (elpy-enable)
  ;;   :config
  ;;   (setq elpy-rpc-python-command "python3"
  ;;	python-shell-interpreter "python3"
  ;;	;;python-shell-interpreter "ipython" elpy-modules
  ;;	elpy-rpc-virtualenv-path 'current
  ;;	pyvenv-mode-line-indicator t )
  ;;   :bind
  ;;   ("C-c p" . elpy-autopep8-fix-code)
  ;;   ("C-c b" . elpy-black-fix-code))
    #+END_SRC
*** Anaconda
    #+BEGIN_SRC emacs-lisp
  ;; (use-package anaconda-mode
  ;;   :ensure
  ;;   :hook (python-mode . anaconda-mode)
  ;;   (python-mode . anaconda-eldoc-mode))
    #+END_SRC
*** Jinja2
    #+BEGIN_SRC emacs-lisp
(use-package jinja2-mode
  :ensure t)
    #+END_SRC
*** Автодополнение
    #+BEGIN_SRC emacs-lisp
  ;; (use-package company-anaconda
  ;;   :ensure
  ;;   :after company
  ;;   :config
  ;;   (add-to-list 'company-backends '(company-anaconda :with company-capf)))
    #+END_SRC
*** Документация
    #+BEGIN_SRC emacs-lisp
;;; Access python documentation
(use-package pydoc
  :commands pydoc
  :config (setq pydoc-command "python3 -m pydoc"))
    #+END_SRC
** Javascript
*** Основной мод
    #+BEGIN_SRC emacs-lisp
;;; Javascript
(use-package js2-mode
  :ensure t
  :config
  (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
  (setq-default js2-basic-offset 2)
  (add-hook 'js2-mode-hook
	    (lambda ()
	      (define-key js-mode-map (kbd "C-x C-e") 'nodejs-repl-send-last-expression)
	      (define-key js-mode-map (kbd "C-c C-j") 'nodejs-repl-send-line)
	      (define-key js-mode-map (kbd "C-c C-r") 'nodejs-repl-send-region)
	      (define-key js-mode-map (kbd "C-c C-l") 'nodejs-repl-load-file)
	      (define-key js-mode-map (kbd "C-c C-z") 'nodejs-repl-switch-to-repl))))
    #+END_SRC
*** Node.js REPL
    #+BEGIN_SRC emacs-lisp
;;; Node.js Repl
(use-package nodejs-repl)
    #+END_SRC
*** Typescript
    #+BEGIN_SRC emacs-lisp
;;; Typescript support
(use-package typescript-mode)
    #+END_SRC
*** Vue.js
    #+BEGIN_SRC emacs-lisp
;;; Vue
(use-package vue-mode
  :ensure
  :config (setq mmm-submode-decoration-level 0))
    #+END_SRC
** Scala
*** REPL
    #+BEGIN_SRC emacs-lisp
      ;; (use-package ammonite-term-repl
      ;;   :ensure
      ;;   :hook (scala-mode . ammonite-term-repl-minor-mode))
    #+END_SRC
*** Scala-mode
    #+BEGIN_SRC emacs-lisp
  (use-package scala-mode
    :ensure
    :mode "\\.s\\(cala\\|bt\\)$")
    #+END_SRC
*** Sbt-mode
    #+BEGIN_SRC emacs-lisp
  (use-package sbt-mode
  :ensure
  :commands sbt-start sbt-command
  :config
  ;; WORKAROUND: https://github.com/ensime/emacs-sbt-mode/issues/31
  ;; allows using SPACE when in the minibuffer
  (substitute-key-definition
   'minibuffer-complete-word
   'self-insert-command
   minibuffer-local-completion-map)
   ;; sbt-supershell kills sbt-mode:  https://github.com/hvesalai/emacs-sbt-mode/issues/152
   (setq sbt:program-options '("-Dsbt.supershell=false")))
    #+END_SRC
** Haskell
*** Основной мод
    #+BEGIN_SRC emacs-lisp
;;; Haskell
(use-package haskell-mode)
    #+END_SRC
*** Окружение разработки
    #+BEGIN_SRC emacs-lisp
;;; Haskell support
(use-package intero
  :ensure
  :after haskell-mode
  :config (add-hook 'haskell-mode-hook 'intero-mode))
    #+END_SRC
** Лиспы в целом
*** Lispy
    #+BEGIN_SRC elisp
(use-package lispy)
    #+END_SRC
*** Parinfer
    #+BEGIN_SRC elisp
(use-package parinfer
  :after lispy
  :bind
  (("C-," . parinfer-toggle-mode))
  :init
  (progn
    (setq parinfer-extensions
	  '(defaults
	    pretty-parens
	    lispy
	    paredit
	    smart-tab
	    smart-yank))
    (add-hook 'clojure-mode-hook #'parinfer-mode)
    (add-hook 'emacs-lisp-mode-hook #'parinfer-mode)
    (add-hook 'common-lisp-mode-hook #'parinfer-mode)
    (add-hook 'scheme-mode-hook #'parinfer-mode)
    (add-hook 'lisp-mode-hook #'parinfer-mode)))
    #+END_SRC
** Clojure
*** Mode
    #+BEGIN_SRC elisp
(use-package clojure-mode)
    #+END_SRC
*** REPL
    #+BEGIN_SRC emacs-lisp
;;; Clojure REPL
(use-package cider)
    #+END_SRC
*** Рефакторинг
    #+BEGIN_SRC elisp
(use-package clj-refactor
  :ensure t
  :hook (clojure-mode . clj-refactor-mode)
  :config
  ((cljr-add-keybindings-with-prefix "C-c C-m")))
    #+END_SRC
** Common Lisp
*** REPL
    #+BEGIN_SRC emacs-lisp
(use-package slime
  :config

  (setq slime-contribs '(slime-fancy slime-repl slime-banner)))
    #+END_SRC
** Fennel
   #+BEGIN_SRC emacs-lisp
(use-package fennel-mode
  :ensure
  :config
(define-key fennel-mode-map (kbd "C-c C-k")
     (defun pnh-fennel-hotswap ()
       (interactive)
       (comint-send-string
	(inferior-lisp-proc)
	(format "(lume.hotswap \"%s\")\n"
		(substring (file-name-nondirectory (buffer-file-name)) 0 -4))))))
   #+END_SRC
* Языки декларирования
** SQL
   #+BEGIN_SRC emacs-lisp

(use-package emacsql)
   #+END_SRC
** Веб шаблоны
*** Web-mode
    #+BEGIN_SRC emacs-lisp
;;; Templates
(use-package web-mode
  :config
  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-enable-auto-pairing t)
  (setq web-mode-enable-current-element-highlight t)
  (setq web-mode-enable-current-column-highlight t))
    #+END_SRC
** Org-mode
   #+BEGIN_SRC emacs-lisp
;;; org
(use-package org
  :config
  (setq org-default-notes-file (concat org-directory "~/Documents/life.org"))
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture)

  (setq org-todo-keywords
	(quote ((sequence "TODO(t)" "MIGRATE(m)" "|" "DONE(d)")
		(sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING"))))
  (setq org-todo-keyword-faces
	(quote (("TODO" :foreground "red" :weight bold)
		("NEXT" :foreground "blue" :weight bold)
		("DONE" :foreground "forest green" :weight bold)
		("WAITING" :foreground "orange" :weight bold)
		("HOLD" :foreground "magenta" :weight bold)
		("CANCELLED" :foreground "forest green" :weight bold)
		("MEETING" :foreground "forest cyan" :weight bold)
		("PHONE" :foreground "blue" :weight bold)))))
   #+END_SRC
*** Пункты списка для org-mode
    #+BEGIN_SRC emacs-lisp
;;; Bullets for org-mode
(use-package org-bullets
  :commands org-bullets-mode
  :hook (org-mode . org-bullets-mode))
    #+END_SRC
*** Агенда
    #+BEGIN_SRC emacs-lisp
;;; Org-mode Setup
(setq org-agenda-files (list
			"~/Documents/life.org"))
    #+END_SRC
*** Техника pomodoro
    #+BEGIN_SRC emacs-lisp
;;; Pomodoro technique tracking for org-mode
(use-package org-pomodoro)
    #+END_SRC
*** Ведение журнала
    #+BEGIN_SRC emacs-lisp
;;; Journal
(use-package org-journal
  :ensure)
    #+END_SRC
*** Презентации
    #+BEGIN_SRC emacs-lisp
;;; Presentation
(use-package epresent
  :ensure t)
    #+END_SRC
** Markdown
*** Превью
    #+BEGIN_SRC emacs-lisp
;;; Markdown preview
(use-package flymd
  :ensure)
    #+END_SRC
** Lilypond
   #+BEGIN_SRC emacs-lisp
;;; Lilypond
(progn
  (autoload 'lilypond "lilypond")
  (autoload 'lilypond-mode "lilypond-mode")
  (setq auto-mode-alist
	(cons '("\\.ly$" . LilyPond-mode) auto-mode-alist))
  (add-hook 'LilyPond-mode-hook (lambda () (turn-on-font-lock))))

;;; Flycheck lilypond
(use-package flycheck-lilypond
  :ensure
  :after flycheck)
   #+END_SRC
* Коммуникации
*** IRC
    #+BEGIN_SRC emacs-lisp
;;; IRC
(use-package erc
  :ensure)
    #+END_SRC
*** Telegram
    #+BEGIN_SRC emacs-lisp
;;; Telegram client
(use-package telega
  :config
(telega-mode-line-mode 1)
(setq telega-chat-fill-column 60)
(setq telega-sticker-size '(8 . 32))
(setq telega-animation-height 8)
(setq telega-video-note-height 8)
(setq telega-user-use-avatars t)
(setq telega-root-show-avatars t))
    #+END_SRC
*** Email
**** Конвертирование org в html
     #+BEGIN_SRC emacs-lisp
;;; convert org to html in gnus
(use-package org-mime
  :ensure)
     #+END_SRC
*** GNUPG
**** Ввод ключей
     #+BEGIN_SRC emacs-lisp
;;; Dialog program for entering password
(use-package pinentry
  :config
  (setq epa-pinentry-mode 'loopback)
  (pinentry-start))
     #+END_SRC
* Разное
** Минорные твики дефолтного имакса
*** Улучшение производительности в больших файлах
    #+BEGIN_SRC emacs-lisp
      ;; (use-package so-long
      ;;   :config (global-so-long-mode 0))
    #+END_SRC
*** Скрыть бары и скролл
    #+BEGIN_SRC emacs-lisp
    ;;; Disable emacs gui
    (menu-bar-mode -1)
    (scroll-bar-mode -1)
    (tool-bar-mode -1)
    (tooltip-mode t)
    (setq use-dialog-box nil)
    (setq redisplay-dont-pause t)
    #+END_SRC
*** Не спрашивать о несуществующих буферах
    #+BEGIN_SRC emacs-lisp
(setq-default confirm-nonexistent-file-or-buffer t)
    #+END_SRC
*** Спрашивать покороче
    Не спрашивать yes/no, вместо этого спрашивать y/n
    #+BEGIN_SRC emacs-lisp
;;; Short messages
(defalias 'yes-or-no-p 'y-or-n-p)
    #+END_SRC
*** Сохранение позиции курсора
    #+BEGIN_SRC emacs-lisp
(setq
 save-place-forget-unreadable-files t
 save-place-limit 200)

(save-place-mode 1)
    #+END_SRC
*** Мигающий курсор
    #+BEGIN_SRC emacs-lisp
  (blink-cursor-mode 1)
    #+END_SRC
*** Переменная PATH в eshell
    #+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
  :config
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize)
    (exec-path-from-shell-copy-env "PATH")))
    #+END_SRC
*** Не создавать лишних файлов
    #+BEGIN_SRC emacs-lisp
  (setq create-lockfiles nil
   make-backup-files nil        ; disable backup files
   auto-save-list-file-name nil ; disable .saves files
   auto-save-default nil)        ; disable auto saving
    #+END_SRC
*** Отображение номера колонки
    #+BEGIN_SRC emacs-lisp
(column-number-mode)
    #+END_SRC
*** Убить буфер
    #+BEGIN_SRC emacs-lisp
(substitute-key-definition 'kill-buffer 'kill-buffer-and-window global-map)
    #+END_SRC
*** Аутлайн для лиспа на основе уровней комментов
    #+BEGIN_SRC emacs-lisp
(use-package outshine
  :hook (emacs-lisp-mode-hook . outshine-mode))
    #+END_SRC
** Полный экран
   #+BEGIN_SRC emacs-lisp
(use-package maxframe
  :ensure
  :hook (window-setup-hook . maximize-frame))
   #+END_SRC
** Which-key
   #+BEGIN_SRC emacs-lisp
  (use-package which-key
    :diminish
    :config
    (setq which-key-show-early-on-C-h t)
    (setq which-key-side-window-location 'bottom)
    (setq which-key-idle-delay 0.5)
    (setq which-key-popup-type 'side-window)
    (global-set-key (kbd "C-h C-k") 'which-key-show-major-mode)
    (setq which-key-sort-order 'which-key-prefix-then-key-order)
    (which-key-mode))
   #+END_SRC
** Системные пакеты
*** Docker
    #+BEGIN_SRC emacs-lisp
;;; Manage docker in emacs
(use-package docker
  :ensure-system-package docker
  :bind ("C-c d" . docker))
    #+END_SRC
*** EMMS
    #+BEGIN_SRC emacs-lisp
  (use-package emms
    :config
   (emms-all)
   (emms-default-players)
   (setq emms-source-file-default-directory (expand-file-name "~/Music"))
   (setq emms-player-list '(emms-player-mpg321 emms-player-ogg123
			 emms-player-mplayer)))
    #+END_SRC
** Баг-трекеры
*** Debbugs
    #+BEGIN_SRC emacs-lisp
;;; Bug-Tracker DebBugs
(use-package debbugs)
    #+END_SRC
** Демонстрация нажатий и команд
   #+BEGIN_SRC emacs-lisp
(use-package keycast
  :ensure)
   #+END_SRC
** HTTP сервер
   #+BEGIN_SRC emacs-lisp
;;; HTTP server
(use-package simple-httpd)
   #+END_SRC

** REST клиент
   #+BEGIN_SRC emacs-lisp
;;; Rest client
(use-package restclient)
   #+END_SRC
** PDF
   #+BEGIN_SRC emacs-lisp
  ;;; PDF Tools
  (use-package pdf-tools
    :if window-system
    :config
    (pdf-loader-install))
   #+END_SRC
** Показать пробелы
   #+BEGIN_SRC emacs-lisp
   (use-package whitespace
    :config (global-set-key (kbd "C-c w") 'whitespace-mode))
   #+END_SRC
** Управление финансами
   #+BEGIN_SRC emacs-lisp
;;; Accounting
(use-package ledger-mode)
   #+END_SRC
** Скрытие минорных модов
   #+BEGIN_SRC emacs-lisp
;;; hide some minor modes
(use-package diminish)
   #+END_SRC
** Автосохранение в /tmp
   #+BEGIN_SRC emacs-lisp
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))
   #+END_SRC
** Увеличение/уменьшение шрифта
   #+BEGIN_SRC emacs-lisp
(defun zoom-in ()
  (interactive)
  (let ((x (+ (face-attribute 'default :height)
	      10)))
    (set-face-attribute 'default nil :height x)))

(defun zoom-out ()
  (interactive)
  (let ((x (- (face-attribute 'default :height)
	      10)))
    (set-face-attribute 'default nil :height x)))

(define-key global-map (kbd "C-1") 'zoom-in)
(define-key global-map (kbd "C-0") 'zoom-out)
   #+END_SRC
** Отключить бипы
   #+BEGIN_SRC emacs-lisp
(setq visible-bell t)
   #+END_SRC
** Обнаруживать просадки
   #+BEGIN_SRC emacs-lisp
     ;; (use-package explain-pause-mode
     ;;   :quelpa (explain-pause-mode :fetcher github :repo "lastquestion/explain-pause-mode")
     ;;   :diminish
     ;;   :config (setq explain-pause-blocking-too-long-ms 200)
     ;;		  (explain-pause-mode))
   #+END_SRC
